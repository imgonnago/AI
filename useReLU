//use ReLU MultiLayerPerceptron. but not reuse ReLU
import torch
import torch.nn as nn

class MultiLayerPerceptron(nn.Module):
    def __init__(self):
        super(MultiLayerPerceptron, self).__init__()
        
        self.fc1 = nn.Linear(10, 20)
        self.relu1 = nn.ReLU()
        
        self.fc2 = nn.Linear(20, 40)
        self.relu2 = nn.ReLU()
        
        self.fc3 = nn.Linear(40, 60)
        self.relu3 = nn.ReLU()
        
        self.fc4 = nn.Linear(60, 80)
        self.relu4 = nn.ReLU()
        
        self.fc5 = nn.Linear(80,1)
        self.sigmoid = nn.Sigmoid()
        
    def forward(self,x):
        x = self.fc1(x)
        x = self.relu1(x)
        x = self.fc2(x)
        x = self.relu2(x)
        x = self.fc3(x)
        x = self.relu3(x)
        x = self.fc4(x)
        x = self.relu4(x)
        x = self.fc5(x)
        x = torch.sigmoid(x)
        return x
    
model = MultiLayerPerceptron()
example_input = torch.randn(16,10)
print(example_input.shape)
output = model(example_input)
print("MLP output: ", output)
