//MultiLayerPerceptron. but not use ReLU
import torch
import torch.nn as nn

class MultilayerPerceptron(nn.Module):
    def __init__(self, input_dim, hidden_dim,output_dim):
        super(MultilayerPerceptron,self).__init__()
        
        self.fc1 = nn.Linear(input_dim, hidden_dim)
        
        self.fc2 = nn.Linear(hidden_dim, hidden_dim)
        
        self.fc3 = nn.Linear(hidden_dim, output_dim)

    def forward(self,x):
        x = self.fc1(x)
        x = self.fc2(x)
        x = self.fc3(x)
        x = torch.sigmoid_(x)
        return x
    

input_dim = 5
hidden_dim = 10
output_dim = 2
model = MultilayerPerceptron(input_dim, hidden_dim, output_dim)
example_input = torch.randn(1,input_dim)
output = model(example_input)
print("MLP output: ", output)
        
